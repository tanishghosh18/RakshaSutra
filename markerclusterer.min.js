function MarkerClusterer(map, opt_markers, opt_options) { this.extend(MarkerClusterer, google.maps.OverlayView), this.map_ = map, this.markers_ = [], this.clusters_ = [], this.sizes = [53, 56, 66, 78, 90], this.styles_ = [], this.ready_ = !1; var options = opt_options || {};
    this.gridSize_ = options.gridSize || 60, this.maxZoom_ = options.maxZoom || null, this.styles_ = options.styles || [], this.imagePath_ = options.imagePath || this.MARKER_CLUSTER_IMAGE_PATH_, this.imageExtension_ = options.imageExtension || this.MARKER_CLUSTER_IMAGE_EXTENSION_, this.zoomOnClick_ = options.zoomOnClick || !0, this.minimumClusterSize = options.minimumClusterSize || 1, this.setupStyles_(), this.setMap(map), this.prevZoom_ = this.map_.getZoom(); var that = this;
    google.maps.event.addListener(this.map_, "zoom_changed", (function() { var maxZoom = that.map_.mapTypes[that.map_.getMapTypeId()].maxZoom,
            zoom = that.map_.getZoom();
        zoom < 0 || zoom > maxZoom || that.prevZoom_ != zoom && (that.prevZoom_ = that.map_.getZoom(), that.resetViewport()) })), google.maps.event.addListener(this.map_, "bounds_changed", (function() { that.redraw() })), opt_markers && opt_markers.length && this.addMarkers(opt_markers, !1) }

function Cluster(markerClusterer) { this.markerClusterer_ = markerClusterer, this.map_ = markerClusterer.getMap(), this.gridSize_ = markerClusterer.getGridSize(), this.minimumSize = markerClusterer.minimumClusterSize, this.center_ = null, this.markers_ = [], this.bounds_ = null, this.clusterIcon_ = new ClusterIcon(this, markerClusterer.getStyles(), markerClusterer.getGridSize()) }

function ClusterIcon(cluster, styles, opt_padding) { cluster.getMarkerClusterer().extend(ClusterIcon, google.maps.OverlayView), this.styles_ = styles, this.padding_ = opt_padding || 0, this.cluster_ = cluster, this.center_ = null, this.map_ = cluster.getMap(), this.div_ = null, this.sums_ = null, this.visible_ = !1, this.setMap(this.map_) }
MarkerClusterer.prototype.MARKER_CLUSTER_IMAGE_PATH_ = "http://google-maps-utility-library-v3.googlecode.com/svn/trunk/markerclusterer/images/m", MarkerClusterer.prototype.MARKER_CLUSTER_IMAGE_EXTENSION_ = "png", MarkerClusterer.prototype.extend = function(obj1, obj2) { return function(object) { for (property in object.prototype) this.prototype[property] = object.prototype[property]; return this }.apply(obj1, [obj2]) }, MarkerClusterer.prototype.onAdd = function() { this.setReady_(!0) }, MarkerClusterer.prototype.idle = function() {}, MarkerClusterer.prototype.draw = function() {}, MarkerClusterer.prototype.setupStyles_ = function() { for (var i = 0, size; size = this.sizes[i]; i++) this.styles_.push({ url: this.imagePath_ + (i + 1) + "." + this.imageExtension_, height: size, width: size }) }, MarkerClusterer.prototype.setStyles = function(styles) { this.styles_ = styles }, MarkerClusterer.prototype.getStyles = function() { return this.styles_ }, MarkerClusterer.prototype.isZoomOnClick = function() { return this.zoomOnClick_ }, MarkerClusterer.prototype.getMarkers = function() { return this.markers_ }, MarkerClusterer.prototype.getTotalMarkers = function() { return this.markers_ }, MarkerClusterer.prototype.setMaxZoom = function(maxZoom) { this.maxZoom_ = maxZoom }, MarkerClusterer.prototype.getMaxZoom = function() { return this.maxZoom_ || this.map_.mapTypes[this.map_.getMapTypeId()].maxZoom }, MarkerClusterer.prototype.calculator_ = function(markers, numStyles) { var index = 1,
        count = markers.length,
        dv = count; return (dv = parseInt(dv)) >= 20 ? index = 5 : dv >= 7 ? index = 4 : dv > 4 ? index = 3 : dv <= 4 && (index = 2), { text: count, index: index = Math.min(index, numStyles) } }, MarkerClusterer.prototype.setCalculator = function(calculator) { this.calculator_ = calculator }, MarkerClusterer.prototype.getCalculator = function() { return this.calculator_ }, MarkerClusterer.prototype.addMarkers = function(markers, opt_nodraw) { for (var i = 0, marker; marker = markers[i]; i++) this.pushMarkerTo_(marker);
    opt_nodraw || this.redraw() }, MarkerClusterer.prototype.pushMarkerTo_ = function(marker) { if (marker.setVisible(!1), marker.setMap(null), marker.isAdded = !1, marker.draggable) { var that = this;
        google.maps.event.addListener(marker, "dragend", (function() { marker.isAdded = !1, that.resetViewport(), that.redraw() })) }
    this.markers_.push(marker) }, MarkerClusterer.prototype.addMarker = function(marker, opt_nodraw) { this.pushMarkerTo_(marker), opt_nodraw || this.redraw() }, MarkerClusterer.prototype.removeMarker = function(marker) { var index = -1; if (this.markers_.indexOf) index = this.markers_.indexOf(marker);
    else
        for (var i = 0, m; m = this.markers_[i]; i++) m != marker || (index = i); return -1 != index && (this.markers_.splice(index, 1), marker.setVisible(!1), marker.setMap(null), this.resetViewport(), this.redraw(), !0) }, MarkerClusterer.prototype.setReady_ = function(ready) { this.ready_ || (this.ready_ = ready, this.createClusters_()) }, MarkerClusterer.prototype.getTotalClusters = function() { return this.clusters_.length }, MarkerClusterer.prototype.getMap = function() { return this.map_ }, MarkerClusterer.prototype.setMap = function(map) { this.map_ = map }, MarkerClusterer.prototype.getGridSize = function() { return this.gridSize_ }, MarkerClusterer.prototype.setGridSize = function(size) { this.gridSize_ = size }, MarkerClusterer.prototype.getExtendedBounds = function(bounds) { var projection = this.getProjection(),
        tr = new google.maps.LatLng(bounds.getNorthEast().lat(), bounds.getNorthEast().lng()),
        bl = new google.maps.LatLng(bounds.getSouthWest().lat(), bounds.getSouthWest().lng()),
        trPix = projection.fromLatLngToDivPixel(tr);
    trPix.x += this.gridSize_, trPix.y -= this.gridSize_; var blPix = projection.fromLatLngToDivPixel(bl);
    blPix.x -= this.gridSize_, blPix.y += this.gridSize_; var ne = projection.fromDivPixelToLatLng(trPix),
        sw = projection.fromDivPixelToLatLng(blPix); return bounds.extend(ne), bounds.extend(sw), bounds }, MarkerClusterer.prototype.isMarkerInBounds_ = function(marker, bounds) { return bounds.contains(marker.getPosition()) }, MarkerClusterer.prototype.clearMarkers = function() { this.resetViewport(), this.markers_ = [] }, MarkerClusterer.prototype.resetViewport = function() { for (var i = 0, cluster; cluster = this.clusters_[i]; i++) cluster.remove(); for (var i = 0, marker; marker = this.markers_[i]; i++) marker.isAdded = !1, marker.setMap(null), marker.setVisible(!1);
    this.clusters_ = [] }, MarkerClusterer.prototype.redraw = function() { this.createClusters_() }, MarkerClusterer.prototype.createClusters_ = function() { if (this.ready_)
        for (var mapBounds = new google.maps.LatLngBounds(this.map_.getBounds().getSouthWest(), this.map_.getBounds().getNorthEast()), bounds = this.getExtendedBounds(mapBounds), i = 0, marker; marker = this.markers_[i]; i++) { var added = !1; if (!marker.isAdded && this.isMarkerInBounds_(marker, bounds)) { for (var j = 0, cluster; cluster = this.clusters_[j]; j++)
                    if (!added && cluster.getCenter() && cluster.isMarkerInClusterBounds(marker)) { added = !0, cluster.addMarker(marker); break }
                var cluster; if (!added)(cluster = new Cluster(this)).addMarker(marker), this.clusters_.push(cluster) } } }, Cluster.prototype.isMarkerAlreadyAdded = function(marker) { if (this.markers_.indexOf) return -1 != this.markers_.indexOf(marker); for (var i = 0, m; m = this.markers_[i]; i++)
        if (m == marker) return !0;
    return !1 }, Cluster.prototype.addMarker = function(marker) { if (this.isMarkerAlreadyAdded(marker)) return !1; if (this.center_ || (this.center_ = marker.getPosition(), this.calculateBounds_()), this.markers_.length < this.minimumSize) marker.setMap(this.map_), marker.setVisible(!0);
    else
        for (var i = 0; i < this.markers_.length; i++) this.markers_[i].setMap(null), this.markers_[i].setVisible(!1); return marker.isAdded = !0, this.markers_.push(marker), this.updateIcon(), !0 }, Cluster.prototype.getMarkerClusterer = function() { return this.markerClusterer_ }, Cluster.prototype.getBounds = function() { return this.calculateBounds_(), this.bounds_ }, Cluster.prototype.remove = function() { this.clusterIcon_.remove(), delete this.markers_ }, Cluster.prototype.getCenter = function() { return this.center_ }, Cluster.prototype.calculateBounds_ = function() { var bounds = new google.maps.LatLngBounds(this.center_, this.center_);
    this.bounds_ = this.markerClusterer_.getExtendedBounds(bounds) }, Cluster.prototype.isMarkerInClusterBounds = function(marker) { return this.bounds_.contains(marker.getPosition()) }, Cluster.prototype.getMap = function() { return this.map_ }, Cluster.prototype.updateIcon = function() { var zoom, mz; if (this.map_.getZoom() > this.markerClusterer_.getMaxZoom())
        for (var i = 0, marker; marker = this.markers_[i]; i++) marker.setMap(this.map_), marker.setVisible(!0);
    else if (this.markers_.length <= this.minimumSize) this.clusterIcon_.hide();
    else { var numStyles = this.markerClusterer_.getStyles().length,
            sums = this.markerClusterer_.getCalculator()(this.markers_, numStyles);
        this.clusterIcon_.setCenter(this.center_), this.clusterIcon_.setSums(sums), this.clusterIcon_.show() } }, ClusterIcon.prototype.triggerClusterClick = function() { var markerClusterer = this.cluster_.getMarkerClusterer();
    google.maps.event.trigger(markerClusterer, "clusterclick", [this.cluster_]), markerClusterer.isZoomOnClick() && (this.map_.panTo(this.cluster_.getCenter()), this.map_.fitBounds(this.cluster_.getBounds())) }, ClusterIcon.prototype.onAdd = function() { if (this.div_ = document.createElement("DIV"), this.visible_) { var pos = this.getPosFromLatLng_(this.center_);
        this.div_.style.cssText = this.createCss(pos), this.div_.innerHTML = this.sums_.text } var panes;
    this.getPanes().overlayImage.appendChild(this.div_); var that = this;
    google.maps.event.addDomListener(this.div_, "click", (function() { that.triggerClusterClick() })) }, ClusterIcon.prototype.getPosFromLatLng_ = function(latlng) { var pos = this.getProjection().fromLatLngToDivPixel(latlng); return pos.x -= parseInt(this.width_ / 2, 10), pos.y -= parseInt(this.height_ / 2, 10), pos }, ClusterIcon.prototype.draw = function() { if (this.visible_) { var pos = this.getPosFromLatLng_(this.center_);
        this.div_.style.top = pos.y + "px", this.div_.style.left = pos.x + "px" } }, ClusterIcon.prototype.hide = function() { this.div_ && (this.div_.style.display = "none"), this.visible_ = !1 }, ClusterIcon.prototype.show = function() { if (this.div_) { var pos = this.getPosFromLatLng_(this.center_);
        this.div_.style.cssText = this.createCss(pos), this.div_.style.display = "" }
    this.visible_ = !0 }, ClusterIcon.prototype.remove = function() { this.setMap(null) }, ClusterIcon.prototype.onRemove = function() { this.div_ && this.div_.parentNode && (this.hide(), this.div_.parentNode.removeChild(this.div_), this.div_ = null) }, ClusterIcon.prototype.setSums = function(sums) { this.sums_ = sums, this.text_ = sums.text, this.index_ = sums.index, this.div_ && (this.div_.innerHTML = sums.text), this.useStyle() }, ClusterIcon.prototype.useStyle = function() { var index = Math.max(0, this.sums_.index - 1);
    index = Math.min(this.styles_.length - 1, index); var style = this.styles_[index];
    this.url_ = style.url, this.height_ = style.height, this.width_ = style.width, this.textColor_ = style.opt_textColor, this.anchor = style.opt_anchor, this.textSize_ = style.opt_textSize }, ClusterIcon.prototype.setCenter = function(center) { this.center_ = center }, ClusterIcon.prototype.createCss = function(pos) { var style = [];
    document.all ? style.push('filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod=scale,src="' + this.url_ + '");') : style.push("background:url(" + this.url_ + ");"), "object" == typeof this.anchor_ ? ("number" == typeof this.anchor_[0] && this.anchor_[0] > 0 && this.anchor_[0] < this.height_ ? style.push("height:" + (this.height_ - this.anchor_[0]) + "px; padding-top:" + this.anchor_[0] + "px;") : style.push("height:" + this.height_ + "px; line-height:" + this.height_ + "px;"), "number" == typeof this.anchor_[1] && this.anchor_[1] > 0 && this.anchor_[1] < this.width_ ? style.push("width:" + (this.width_ - this.anchor_[1]) + "px; padding-left:" + this.anchor_[1] + "px;") : style.push("width:" + this.width_ + "px; text-align:center;")) : style.push("height:" + this.height_ + "px; line-height:" + this.height_ + "px; width:" + this.width_ + "px; text-align:center;"); var txtColor = this.textColor_ ? this.textColor_ : "black",
        txtSize = this.textSize_ ? this.textSize_ : 11; return style.push("cursor:pointer; top:" + pos.y + "px; left:" + pos.x + "px; color:" + txtColor + "; position:absolute; font-size:" + txtSize + "px; font-family:Arial,sans-serif; font-weight:bold"), style.join("") }, window.MarkerClusterer = MarkerClusterer, MarkerClusterer.prototype.addMarker = MarkerClusterer.prototype.addMarker, MarkerClusterer.prototype.addMarkers = MarkerClusterer.prototype.addMarkers, MarkerClusterer.prototype.clearMarkers = MarkerClusterer.prototype.clearMarkers, MarkerClusterer.prototype.getCalculator = MarkerClusterer.prototype.getCalculator, MarkerClusterer.prototype.getGridSize = MarkerClusterer.prototype.getGridSize, MarkerClusterer.prototype.getMap = MarkerClusterer.prototype.getMap, MarkerClusterer.prototype.getMarkers = MarkerClusterer.prototype.getMarkers, MarkerClusterer.prototype.getMaxZoom = MarkerClusterer.prototype.getMaxZoom, MarkerClusterer.prototype.getStyles = MarkerClusterer.prototype.getStyles, MarkerClusterer.prototype.getTotalClusters = MarkerClusterer.prototype.getTotalClusters, MarkerClusterer.prototype.getTotalMarkers = MarkerClusterer.prototype.getTotalMarkers, MarkerClusterer.prototype.redraw = MarkerClusterer.prototype.redraw, MarkerClusterer.prototype.removeMarker = MarkerClusterer.prototype.removeMarker, MarkerClusterer.prototype.resetViewport = MarkerClusterer.prototype.resetViewport, MarkerClusterer.prototype.setCalculator = MarkerClusterer.prototype.setCalculator, MarkerClusterer.prototype.setGridSize = MarkerClusterer.prototype.setGridSize, MarkerClusterer.prototype.onAdd = MarkerClusterer.prototype.onAdd, MarkerClusterer.prototype.draw = MarkerClusterer.prototype.draw, MarkerClusterer.prototype.idle = MarkerClusterer.prototype.idle, ClusterIcon.prototype.onAdd = ClusterIcon.prototype.onAdd, ClusterIcon.prototype.draw = ClusterIcon.prototype.draw, ClusterIcon.prototype.onRemove = ClusterIcon.prototype.onRemove;